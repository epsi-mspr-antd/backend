// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  pseudo   String
  image    String?

  roles       Role[]
  addresses   Address[]
  plants      Plant[]   @relation("owner")
  plantsGuard Plant[]   @relation("guard")
  tips        Tip[]
  session     Session?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("role")
}

model Session {
  id    Int     @id @default(autoincrement())
  token String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt

  @@map("session")
}

model Address {
  id Int @id @default(autoincrement())

  name      String
  street    String
  zip       String
  city      String
  longitude Float
  latitude  Float

  plants Plant[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Plant {
  id    Int     @id @default(autoincrement())
  name  String
  image String?

  tips Tip[]

  guardId   Int?
  guard     User?        @relation(fields: [guardId], references: [id], name: "guard", onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], name: "owner", onDelete: Cascade)
  addressId Int
  address   Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  statusId  Int
  status    PlantStatus  @relation(fields: [statusId], references: [id], onDelete: Cascade)
  speciesId Int
  species   PlantSpecies @relation(fields: [speciesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plant")
}

model PlantStatus {
  id   Int    @id @default(autoincrement())
  name String

  plants Plant[]

  @@map("plant_status")
}

model PlantSpecies {
  id   Int    @id @default(autoincrement())
  name String

  plants Plant[]

  @@map("plant_species")
}

model Tip {
  id          Int     @id @default(autoincrement())
  description String
  image       String?

  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantId Int
  plant   Plant @relation(fields: [plantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tip")
}
